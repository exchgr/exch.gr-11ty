name: Deploy
run-name: "${{ github.actor }} is deploying: ${{ github.event.head_commit.message }}"
on:
  push:
    branches:
      - 'master'
env:
  APP_NAME: ${{ vars.APP_NAME }}
  AWS_REGION: ${{ vars.AWS_REGION }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
  CLOUDFLARE_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}
  CLOUDFLARE_ACCOUNT_ID: ${{ vars.CLOUDFLARE_ACCOUNT_ID }}
  GITHUB_REPOSITORY_NAME: ${{ github.event.repository.name }}
  NODE_VERSION: ${{ vars.NODE_VERSION }}
  STRAPI_HOST: ${{ vars.STRAPI_HOST }}
  STRAPI_PORT: ${{ vars.STRAPI_PORT }}
  STRAPI_PROTOCOL: ${{ vars.STRAPI_PROTOCOL }}
jobs:
  deploy-infra:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform
    steps:
      - name: "checkout"
        uses: actions/checkout@v3
      - name: "setup terraform"
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false
      - name: "authenticate with aws"
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
      - name: "cache terraform state"
        id: cache
        uses: actions/cache@v3
        with:
          key: ${{ hashFiles('terraform/**') }}
          path: |
            terraform/.terraform
            terraform/.terraform.lock.hcl
      - name: "terraform init"
        if: steps.cache.outputs.cache-hit != 'true'
        run: terraform init -backend-config="bucket=$APP_NAME-terraform" -backend-config="key=terraform-state" -backend-config="region=$AWS_REGION"
      - name: "terraform apply"
        if: steps.cache.outputs.cache-hit != 'true'
        run: terraform apply -auto-approve
